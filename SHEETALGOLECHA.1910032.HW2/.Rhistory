library("rvest")
library("XML")
# IMDB Top 250 Movies
url = "https://www.tripadvisor.in/Hotels-g297604-Goa-Hotels.html"
page = read_html(url)
page
hotel.nodes = html_nodes(page,'.prominent')
# Check one node
xmlTreeParse(hotel.nodes[[1]])
#hotel.nodes[[1]]
hotel.link = sapply(html_attrs(hotel.nodes),`[[`,'href')
hotel.link = paste0("https://www.tripadvisor.in",hotel.link)
hotel.name = html_text(hotel.nodes)
details = hotel.link[1]
details_page = read_html(url)
price=list[]
price=list()
for ( i in length(hotel.link))
{
details = hotel.link[i]
details_page = read_html(url)
price.nodes = html_nodes(details_page,'.price ')
# Check one node
xmlTreeParse(price.nodes[[ii]])
price = html_text(price.nodes)
}
price=list()
for ( i in length(hotel.link))
{
details = hotel.link[i]
details_page = read_html(url)
price.nodes = html_nodes(details_page,'.price ')
# Check one node
xmlTreeParse(price.nodes[[i]])
price = html_text(price.nodes)
}
besthotel = data.frame(hotel.name,  hotel.link,price)
besthotel
besthotel = data.frame(hotel.name,  hotel.link,price)
##price=list()
##for ( i in length(hotel.link))
##{
details = hotel.link[1]
details_page = read_html(url)
price.nodes = html_nodes(details_page,'.price ')
# Check one node
xmlTreeParse(price.nodes[[1]])
##price = html_text(price.nodes)
##}
price = html_text(price.nodes)
price
price=list()
details = hotel.link[1]
details_page = read_html(url)
price.nodes = html_nodes(details_page,'.price ')
# Check one node
xmlTreeParse(price.nodes[[1]])
price = html_text(price.nodes)
price
price=list()
price.nodes = html_nodes(details_page,'.xthrough_bad ')
# Check one node
xmlTreeParse(price.nodes[[1]])
##price=list()
##for ( i in length(hotel.link))
##{
details = hotel.link[1]
details_page = read_html(url)
price.nodes = html_nodes(details_page,'no_cpu offer premium chevron hacComplete  avail  lowestPriceFlagPresent ')
# Check one node
xmlTreeParse(price.nodes[[1]])
##price=list()
##for ( i in length(hotel.link))
##{
details = hotel.link[1]
details_page = read_html(url)
price.nodes = html_nodes(details_page,'no_cpu offer premium chevron hacComplete  avail  lowestPriceFlagPresent')
# Check one node
xmlTreeParse(price.nodes[[1]])
.__resizeWatch
price.nodes = html_nodes(page,'.__resizeWatch')
# Check one node
xmlTreeParse(price.nodes[[1]])
price.nodes = html_nodes(page,'price autoResize')
# Check one node
xmlTreeParse(price.nodes[[1]])
price.nodes = html_nodes(page,'price-wrap')
# Check one node
xmlTreeParse(price.nodes[[1]])
price.nodes = html_nodes(page,'text-link no_cpu metaOffer')
# Check one node
xmlTreeParse(price.nodes[[1]])
price.nodes = html_nodes(page,'text-link no_cpu metaOffer')
# Check one node
xmlTreeParse(price.nodes[[1]])
price.nodes = html_nodes(page,'text-link no_cpu metaOffer')
# Check one node
xmlTreeParse(price.nodes[[1]])
price.nodes = html_nodes(page,'text-link no_cpu metaOffer')
# Check one node
xmlTreeParse(price.nodes[[1]])
price.nodes = html_nodes(page,'text-link no_cpu metaOffer')
# Check one node
xmlTreeParse(price.nodes[[1]])
setwd("/Users/sheetalgolecha/Documents/Data collection/Session-4 Materials-20180221")
getwd()   # check if it worked
suppressPackageStartupMessages({
if (!require(stringr)){ install.packages("stringr")}; library(stringr)
if (!require(leaflet)){ install.packages("leaflet")}; library(leaflet)
if (!require(jsonlite)){ install.packages("jsonlite")}; library(jsonlite)
})
City_cords = jsonlite::fromJSON("./city.list.json")
str(City_cords)
a=City_cords$country=="IN"
ind_city=City_cords[a,]
Places <- c("Hyderabad", "Prabhalgadh","Pallani","Salher","Rajmachi","Gokarna","Sandhakphu","Nagala","kamshet",                     "State of Goa","coorg","Goechala","State Of Kerala","Mumbai")
reason <- c("Home", "First Trek Mar 2013","Second trek Where i met an amazing person Mohit","another with old friends. where i realised am not peoples person","First with COusin bad idea :P","After a break of Six months :(","First Himalayan Trek","First Natural water slide","My first paralide :)","Love swimming and beach too","Famil trip2016","Second himalayan trek with a best friend touhing a height 5000 mtrs","Family trip 2017","Missed my friends")
Places <- c("Hyderabad", "Prabhalgadh","Pallani","Salher","Rajmachi","Gokarna","Sandhakphu","Nagala","kamshet",                     "State of Goa","coorg","Goechala","State Of Kerala","Mumbai")
reason <- c("Home", "First Trek Mar 2013","Second trek Where i met an amazing person Mohit","another with old friends. where i realised am not peoples person","First with COusin bad idea :P","After a break of Six months :(","First Himalayan Trek","First Natural water slide","My first paralide :)","Love swimming and beach too","Famil trip2016","Second himalayan trek with a best friend touhing a height 5000 mtrs","Family trip 2017","Missed my friends")
my_list = data.frame(id=integer(), name=character(), country=character(),
coord.lon=numeric(), coord.lat=numeric(), stringsAsFactors=FALSE)
my_list
for(i in 1:length(Places)){
x=ind_city[tolower(ind_city$name)==tolower(Places[i]),]
my_list=rbind(my_list,x)
}
my_list
my_list
holiday=data.frame(Places,reason)
for (i in 1:length(Places)){
holiday$lat[i]=my_list$coord$lat[i]
holiday$lon[i]=my_list$coord$lon[i]
}
holiday
lon1=min(holiday$lon)-1;lon1
lon2=max(holiday$lon)+1;lon2
lat1=min(holiday$lat)-1;lat1
lat2=max(holiday$lat)+1;lat2
mymap = leaflet() %>%
addProviderTiles("Stamen.Watercolor") %>%    # try '?addProviderTiles'
addProviderTiles("Stamen.TonerHybrid",
options = providerTileOptions(opacity = 0.8)) %>%
# setView(5, 20, zoom=1) %>%
setMaxBounds(lon1, lat1, lon2, lat2) %>%
# color and weight arguments for the color and weight of the line
addPolylines(data=holiday, ~lon, ~lat, color = "BLACK",
weight = 2, opacity = 0.6) %>%
addCircleMarkers(data=holiday, ~lon, ~lat,  color = "#daa520",
opacity = 0.6, radius = 2, popup = paste(holiday$city, holiday$desc, sep="<br>"))
mymap
